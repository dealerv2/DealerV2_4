generate   10000
produce    1
seed 17
title "Descr.UE_test_syntax "
# 99 is the query-id that asks for syntax testing
#side[16], sideXsuit[4][4], handtot[2][8],handXsuit[2][4][2],
 /* 99 is a testing metric. It fills the first 64 slots of the 128 slot result area as follows
   -1,  -2,  -3,  -4,  -5,  -6,  -7,  -8,  -9, -10, -11, -12, -13, -14, -15, -16
  100, 101, 102, 103, 200, 201, 202, 203, 300, 301, 302, 303, 400, 401, 402, 403 // (100 = clubs, 400 = spades)
 1000,1001,1002,1003,1004,1005,1006,1007,2000,2001,2002,2003,2004,2005,2006,2007 // (1000 = north/east, 2000=south/west)
 1100,1101,1200,1201,1300,1301,1400,1401,2100,2101,2200,2201,2300,2301,2400,2401 // N=1000,S=2000,C=100,S=400
 */
action
    printrpt("Side X 16 =", usereval(99, NS, 0),usereval(99, NS, 1),usereval(99, NS, 2),usereval(99, NS, 3),
                            usereval(99, NS, 4),usereval(99, NS, 5),usereval(99, NS, 6),usereval(99, NS, 7), 
                            usereval(99, NS, 8),usereval(99, NS, 9),usereval(99, NS,10),usereval(99, NS,11),
                            usereval(99, NS,12),usereval(99, NS,13),usereval(99, NS,14),usereval(99, NS,15)),   
    printrpt("Side_Suit 4 X 4 =", 
                            usereval(99, NS, clubs,  0),usereval(99, NS, clubs,  1),usereval(99, NS, clubs,  2),usereval(99, NS, clubs, 3),
                            usereval(99, NS, diamond,0),usereval(99, NS, diamond,1),usereval(99, NS, diamond,2),usereval(99, NS,diamond,3),
                            usereval(99, NS, hearts, 0),usereval(99, NS, hearts, 1),usereval(99, NS, hearts, 2),usereval(99, NS, hearts,3),
                            usereval(99, NS, spades, 0),usereval(99, NS, spades, 1),usereval(99, NS, spades, 2),usereval(99, NS, spades,3)),
    printrpt("Hand 2 X 8 =", 
                            usereval(99, north,  0),usereval(99, north,  1),usereval(99, north,  2),usereval(99, north, 3),
                            usereval(99, north,  4),usereval(99, north,  5),usereval(99, north,  6),usereval(99, north, 7),
                            usereval(99, south,  0),usereval(99, south,  1),usereval(99, south,  2),usereval(99, south, 3),
                            usereval(99, south,  4),usereval(99, south,  5),usereval(99, south,  6),usereval(99, south, 7)),
     printrpt("Hand_suit 2 X 4 X 2 =", 
                            usereval(99, north,  clubs, 0),usereval(99, north,  clubs, 1),usereval(99, north, diamond,0),usereval(99, north,diamond,1),
                            usereval(99, north,  hearts,0),usereval(99, north,  hearts,1),usereval(99, north, spades, 0),usereval(99, north,spades, 1),
                            usereval(99, south,  clubs, 0),usereval(99, south,  clubs, 1),usereval(99, south, diamond,0),usereval(99, south,diamond,1),
                            usereval(99, south,  hearts,0),usereval(99, south,  hearts,1),usereval(99, south, spades, 0),usereval(99, south,spades, 1)),                         
                            
   
   /* The designer of the metric needs to tell the user of the metric which
      slots the results will be returned in.
      Each side has its own set of 128 counters to work with. So EW use the same
      slot numbers that NS do, but in a different set of coutners.
      
      The suggested standard is that queries that do not specify a hand 
      or a suit, but only a side, can put their values in any of the slots
      0 .. 127. However if the designer of the metric routine wants to allow 
      for the user to specify hand and / or suit then the following is
      suggested:
      slots 0..15 and 64-127 results from statements like
      usereval(99 , EW, 8 )  which specify only tag  and side.
      16 values in the first 16 slots, and as many as needed in slots 64 .. 127
  
      slots 16 .. 31 results from statements like
      usereval(99, NS, clubs, 0 ) (slot 16) or usereval(99,NS,spades,3) (slot 31)
      4 values for each of the 4 suits; the total for side (4 x 4 = 16 )
      
      slots 32 .. 47 results from statements like
      usereval(99,north,0) (slot 32) or usereval(99,south,7) (slot 47)
      8 values for each of the 2 hands.  (2 x 8 = 16)
      
      Finally slots 48 .. 63 results from statemenst like
      usereval(99,north,clubs,0) (slot 48) or usereval(99,south,spades,1) (slot 63)
      2 values for each of the 4 suits in each of the 2 hands. (2 x 4 x 2 = 16)
      
      The usereval cache (for each side) is updated whenever the deal changes,
      or whenever the tag changes. Thus the designer of the server code should 
      fill all the slots that that tag could ask for, on every call.
      
      Because if the statement usereval(99,EW,clubs,2) were to only update slot 18,
      then the next call to 99 e.g. usereval(99, EW, spades, 0) would NOT result
      in a call to the server, but the 'value' would be returned from the 'cache'
      and would likely be 'garbage' since that slot in the cache would not have 
      been updated.
      
      For the above reason, it is often just as convenient to use the 
      usereval(tag, side, index) form and not worry about the other forms.
      However using the other forms can have the benefit of documenting
      which values for which hands or which suits, are being analyzed.
  */


